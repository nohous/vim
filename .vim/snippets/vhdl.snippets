# Case statement
snippet case
	case ${1:expression} is
		when ${2:choices} =>
			${3:--sequential statement(s)};
		when ${4:choice2} =>
			${5:--sequential statement(s)};
		${6:--...}
	end case;

snippet hdr
	--------------------------------------------------------------------------------
	-- ${1}
	--------------------------------------------------------------------------------
	--  Module: ${2:`expand('%:t:r')`}
	--    File: `expand('%:t')`
	--    Date: `strftime('%Y-%m-%d')`
	--     Rev: ${3:0.1}
	--  Author: PN
	--------------------------------------------------------------------------------
	-- ${4} 
	--------------------------------------------------------------------------------
	-- $3, `strftime('%Y-%m-%d')`, PN, ${5:Initial release}
	--------------------------------------------------------------------------------
	

snippet hdb
	----------------------------------------------------------------------------
	-- ${1:Heading}
	----------------------------------------------------------------------------
snippet hds
	---- ${1} ------------------------------------------------------------------

# Constant declaration
snippet const
	constant ${1:NAME} : ${2:type} := ${3:value};${4}

snippet ent
	entity ${1:<ent_name>} is
		port (
			${2:--I/O}
		);
	end entity $1;
	
	architecture ${3:behav} of $1 is
	
	begin
		${4}
	end $3;

# If Condition
snippet if
	if (${1:--condition}) then
		${2:--do something};
	end if;
# Else if...
snippet ei
	elsif (${1:--condition}) then
		${2:--do something else};
# Else
snippet el
	else
		${1:--do something else};

# library ieee
snippet lib
	library ieee;  
	use ieee.${1:std_logic_1164}.all;
	use ieee.${2:numeric_std}.all;${3}

# Process (plain)
snippet proc
	${1:proc name}: process(${2:clk}) is
	begin
		if $2'event and $2 = '1' then
			if ${3:reset} = '1' then
				${4}
			end if;
		end if;
	end process;

# Signal declaration
snippet sig
	signal ${1:name} : ${2:type};${3}

# std_logic;
snippet sl
	std_logic;${1}

# std_logic_vector(xx downto 0);
snippet slv
	std_logic_vector(${1:xx} downto ${2:0});${3}

# Type Declaration
snippet td
	type ${1:identifier} is ${2:definition};${3}
# Subtype Declaration
snippet st
	subtype ${1:identifier} is ${2:subtype indication};${3}

